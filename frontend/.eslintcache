[{"D:\\jsj\\src\\study\\chatweb\\frontend\\src\\index.js":"1","D:\\jsj\\src\\study\\chatweb\\frontend\\src\\App.js":"2","D:\\jsj\\src\\study\\chatweb\\frontend\\src\\components\\Messenger\\index.js":"3","D:\\jsj\\src\\study\\chatweb\\frontend\\src\\components\\ConversationList\\index.js":"4","D:\\jsj\\src\\study\\chatweb\\frontend\\src\\components\\MessageList\\index.js":"5","D:\\jsj\\src\\study\\chatweb\\frontend\\src\\components\\ConversationSearch\\index.js":"6","D:\\jsj\\src\\study\\chatweb\\frontend\\src\\components\\Compose\\index.js":"7","D:\\jsj\\src\\study\\chatweb\\frontend\\src\\components\\ConversationListItem\\index.js":"8","D:\\jsj\\src\\study\\chatweb\\frontend\\src\\components\\Toolbar\\index.js":"9","D:\\jsj\\src\\study\\chatweb\\frontend\\src\\components\\ToolbarButton\\index.js":"10","D:\\jsj\\src\\study\\chatweb\\frontend\\src\\components\\Message\\index.js":"11"},{"size":147,"mtime":1623832361000,"results":"12","hashOfConfig":"13"},{"size":192,"mtime":1649923922967,"results":"14","hashOfConfig":"13"},{"size":1068,"mtime":1649923752114,"results":"15","hashOfConfig":"13"},{"size":1571,"mtime":1649923831195,"results":"16","hashOfConfig":"13"},{"size":5457,"mtime":1625416936000,"results":"17","hashOfConfig":"13"},{"size":326,"mtime":1625416936000,"results":"18","hashOfConfig":"13"},{"size":337,"mtime":1625416936000,"results":"19","hashOfConfig":"13"},{"size":609,"mtime":1625416936000,"results":"20","hashOfConfig":"13"},{"size":378,"mtime":1625416936000,"results":"21","hashOfConfig":"13"},{"size":203,"mtime":1625416936000,"results":"22","hashOfConfig":"13"},{"size":865,"mtime":1649923463691,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fjfzu5",{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\jsj\\src\\study\\chatweb\\frontend\\src\\index.js",[],"D:\\jsj\\src\\study\\chatweb\\frontend\\src\\App.js",[],"D:\\jsj\\src\\study\\chatweb\\frontend\\src\\components\\Messenger\\index.js",[],"D:\\jsj\\src\\study\\chatweb\\frontend\\src\\components\\ConversationList\\index.js",["48"],"import React, {useState, useEffect} from 'react';\r\nimport ConversationSearch from '../ConversationSearch';\r\nimport ConversationListItem from '../ConversationListItem';\r\nimport Toolbar from '../Toolbar';\r\nimport ToolbarButton from '../ToolbarButton';\r\nimport axios from 'axios';\r\n\r\nimport './ConversationList.css';\r\n\r\nexport default function ConversationList(props) {\r\n  const [conversations, setConversations] = useState([]);\r\n  useEffect(() => {\r\n    getConversations()\r\n  },[])\r\n\r\n const getConversations = () => {\r\n    axios.get('https://randomuser.me/api/?results=20').then(response => {\r\n        let newConversations = response.data.results.map(result => {\r\n          return {\r\n            photo: result.picture.large,\r\n            name: `${result.name.first} ${result.name.last}`,\r\n            text: 'Hello world! This is a long message that needs to be truncated.'\r\n          };\r\n        });\r\n        setConversations([...conversations, ...newConversations])\r\n    });\r\n  }\r\n\r\n    return (\r\n      <div className=\"conversation-list\">\r\n        <Toolbar\r\n          title=\"Messenger\"\r\n          leftItems={[\r\n            <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\r\n          ]}\r\n          rightItems={[\r\n            <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\r\n          ]}\r\n        />\r\n        <ConversationSearch />\r\n        {\r\n          conversations.map(conversation =>\r\n            <ConversationListItem\r\n              key={conversation.name}\r\n              data={conversation}\r\n            />\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n}","D:\\jsj\\src\\study\\chatweb\\frontend\\src\\components\\MessageList\\index.js",["49"],"import React, {useEffect, useState} from 'react';\nimport Compose from '../Compose';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport Message from '../Message';\nimport moment from 'moment';\n\nimport './MessageList.css';\n\nconst MY_USER_ID = 'apple';\n\nexport default function MessageList(props) {\n  const [messages, setMessages] = useState([])\n\n  useEffect(() => {\n    getMessages();\n  },[])\n\n  \n  const getMessages = () => {\n     var tempMessages = [\n        {\n          id: 1,\n          author: 'apple',\n          message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n          timestamp: new Date().getTime()\n        },\n        {\n          id: 2,\n          author: 'orange',\n          message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n          timestamp: new Date().getTime()\n        },\n        {\n          id: 3,\n          author: 'orange',\n          message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n          timestamp: new Date().getTime()\n        },\n        {\n          id: 4,\n          author: 'apple',\n          message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n          timestamp: new Date().getTime()\n        },\n        {\n          id: 5,\n          author: 'apple',\n          message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n          timestamp: new Date().getTime()\n        },\n        {\n          id: 6,\n          author: 'apple',\n          message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n          timestamp: new Date().getTime()\n        },\n        {\n          id: 7,\n          author: 'orange',\n          message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n          timestamp: new Date().getTime()\n        },\n        {\n          id: 8,\n          author: 'orange',\n          message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n          timestamp: new Date().getTime()\n        },\n        {\n          id: 9,\n          author: 'apple',\n          message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n          timestamp: new Date().getTime()\n        },\n        {\n          id: 10,\n          author: 'orange',\n          message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n          timestamp: new Date().getTime()\n        },\n      ]\n      setMessages([...messages, ...tempMessages])\n  }\n\n  const renderMessages = () => {\n    let i = 0;\n    let messageCount = messages.length;\n    let tempMessages = [];\n\n    while (i < messageCount) {\n      let previous = messages[i - 1];\n      let current = messages[i];\n      let next = messages[i + 1];\n      let isMine = current.author === MY_USER_ID;\n      let currentMoment = moment(current.timestamp);\n      let prevBySameAuthor = false;\n      let nextBySameAuthor = false;\n      let startsSequence = true;\n      let endsSequence = true;\n      let showTimestamp = true;\n\n      if (previous) {\n        let previousMoment = moment(previous.timestamp);\n        let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n        prevBySameAuthor = previous.author === current.author;\n        \n        if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n          startsSequence = false;\n        }\n\n        if (previousDuration.as('hours') < 1) {\n          showTimestamp = false;\n        }\n      }\n\n      if (next) {\n        let nextMoment = moment(next.timestamp);\n        let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n        nextBySameAuthor = next.author === current.author;\n\n        if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n          endsSequence = false;\n        }\n      }\n\n      tempMessages.push(\n        <Message\n          key={i}\n          isMine={isMine}\n          startsSequence={startsSequence}\n          endsSequence={endsSequence}\n          showTimestamp={showTimestamp}\n          data={current}\n        />\n      );\n\n      // Proceed to the next message.\n      i += 1;\n    }\n\n    return tempMessages;\n  }\n\n    return(\n      <div className=\"message-list\">\n        <Toolbar\n          title=\"Conversation Title\"\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n          ]}\n        />\n\n        <div className=\"message-list-container\">{renderMessages()}</div>\n\n        <Compose rightItems={[\n          <ToolbarButton key=\"photo\" icon=\"ion-ios-camera\" />,\n          <ToolbarButton key=\"image\" icon=\"ion-ios-image\" />,\n          <ToolbarButton key=\"audio\" icon=\"ion-ios-mic\" />,\n          <ToolbarButton key=\"money\" icon=\"ion-ios-card\" />,\n          <ToolbarButton key=\"games\" icon=\"ion-logo-game-controller-b\" />,\n          <ToolbarButton key=\"emoji\" icon=\"ion-ios-happy\" />\n        ]}/>\n      </div>\n    );\n}","D:\\jsj\\src\\study\\chatweb\\frontend\\src\\components\\ConversationSearch\\index.js",[],"D:\\jsj\\src\\study\\chatweb\\frontend\\src\\components\\Compose\\index.js",[],"D:\\jsj\\src\\study\\chatweb\\frontend\\src\\components\\ConversationListItem\\index.js",[],"D:\\jsj\\src\\study\\chatweb\\frontend\\src\\components\\Toolbar\\index.js",[],"D:\\jsj\\src\\study\\chatweb\\frontend\\src\\components\\ToolbarButton\\index.js",[],"D:\\jsj\\src\\study\\chatweb\\frontend\\src\\components\\Message\\index.js",[],{"ruleId":"50","severity":1,"message":"51","line":14,"column":5,"nodeType":"52","endLine":14,"endColumn":7,"suggestions":"53"},{"ruleId":"50","severity":1,"message":"54","line":17,"column":5,"nodeType":"52","endLine":17,"endColumn":7,"suggestions":"55"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getConversations'. Either include it or remove the dependency array.","ArrayExpression",["56"],"React Hook useEffect has a missing dependency: 'getMessages'. Either include it or remove the dependency array.",["57"],{"desc":"58","fix":"59"},{"desc":"60","fix":"61"},"Update the dependencies array to be: [getConversations]",{"range":"62","text":"63"},"Update the dependencies array to be: [getMessages]",{"range":"64","text":"65"},[476,478],"[getConversations]",[422,424],"[getMessages]"]